{"remainingRequest":"/home/runner/work/U1_Matematicas/U1_Matematicas/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Matematicas/U1_Matematicas/src/views/curso/Tema1.vue?vue&type=template&id=aa6dd3ce&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Matematicas/U1_Matematicas/src/views/curso/Tema1.vue","mtime":1758486869313},{"path":"/home/runner/work/U1_Matematicas/U1_Matematicas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Matematicas/U1_Matematicas/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Matematicas/U1_Matematicas/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Matematicas/U1_Matematicas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Matematicas/U1_Matematicas/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}